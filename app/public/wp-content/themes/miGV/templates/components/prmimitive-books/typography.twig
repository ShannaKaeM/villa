{#
/**
 * Typography Primitive Component
 * 
 * Applies individual typography design tokens consistently
 * 
 * @param string font_size - Font size token (small, medium, large, x-large, xx-large, huge)
 * @param string font_weight - Font weight token (regular, medium, semiBold, bold, extraBold)
 * @param string line_height - Line height token (base, heading)
 * @param string letter_spacing - Letter spacing token (tight, normal, wide, wider, widest)
 * @param string text_transform - Text transform (none, uppercase, lowercase, capitalize)
 * @param string element - HTML element to wrap content (default: 'span')
 * @param string class - Additional CSS classes
 * @param string content - Content to wrap (optional)
 * @param boolean inline - Whether to render inline styles (default: false, uses CSS classes)
 * 
 * Usage:
 * {% include 'components/primitive-books/typography.twig' with {
 *   'font_size': 'large',
 *   'font_weight': 'bold',
 *   'content': 'Hello World'
 * } %}
 */
#}

{# Set defaults #}
{% set font_size = font_size|default('medium') %}
{% set font_weight = font_weight|default('regular') %}
{% set line_height = line_height|default('base') %}
{% set letter_spacing = letter_spacing|default('normal') %}
{% set text_transform = text_transform|default('none') %}
{% set element = element|default('span') %}
{% set class = class|default('') %}
{% set content = content|default('') %}
{% set inline = inline|default(false) %}

{# Generate CSS variable references #}
{% set font_size_var = 'var(--wp--preset--font-size--' ~ font_size ~ ')' %}
{% set font_weight_var = 'var(--wp--custom--typography--base-styles--font-weights--' ~ font_weight ~ ')' %}
{% set line_height_var = 'var(--wp--custom--typography--base-styles--line-heights--' ~ line_height ~ ')' %}
{% set letter_spacing_var = 'var(--wp--custom--typography--base-styles--letter-spacing--' ~ letter_spacing ~ ')' %}

{# Build style attribute for inline usage #}
{% set style_attr = inline ? 
    'font-size: ' ~ font_size_var ~ '; ' ~
    'font-weight: ' ~ font_weight_var ~ '; ' ~
    'line-height: ' ~ line_height_var ~ '; ' ~
    'letter-spacing: ' ~ letter_spacing_var ~ '; ' ~
    'text-transform: ' ~ text_transform ~ ';'
    : '' %}

{# Build CSS class names for non-inline usage #}
{% set typography_classes = [
    'typo-size-' ~ font_size,
    'typo-weight-' ~ font_weight,
    'typo-line-' ~ line_height,
    'typo-spacing-' ~ letter_spacing,
    'typo-transform-' ~ text_transform
] %}

{# Build complete class attribute #}
{% set complete_class = [typography_classes|join(' '), class]|join(' ')|trim %}

{# Render the element #}
{% if content %}
    <{{ element }}{% if complete_class and not inline %} class="{{ complete_class }}"{% endif %}{% if style_attr %} style="{{ style_attr }}"{% endif %}>
        {{ content|raw }}
    </{{ element }}>
{% else %}
    {# Self-closing or container mode - output opening tag only #}
    <{{ element }}{% if complete_class and not inline %} class="{{ complete_class }}"{% endif %}{% if style_attr %} style="{{ style_attr }}"{% endif %}>
{% endif %}

{# Generate CSS classes for design system (when not using inline styles) #}
{% if not inline %}
<style>
    .typo-size-{{ font_size }} { font-size: {{ font_size_var }}; }
    .typo-weight-{{ font_weight }} { font-weight: {{ font_weight_var }}; }
    .typo-line-{{ line_height }} { line-height: {{ line_height_var }}; }
    .typo-spacing-{{ letter_spacing }} { letter-spacing: {{ letter_spacing_var }}; }
    .typo-transform-{{ text_transform }} { text-transform: {{ text_transform }}; }
</style>
{% endif %}
